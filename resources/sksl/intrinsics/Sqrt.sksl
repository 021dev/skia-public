uniform float2x2 testMatrix2x2;  // = {1, 2, 3, 4}
uniform half4 colorGreen, colorRed;

half4 main(float2 coords) {
    // We should not attempt to constant-fold `sqrt(negative values)`. This sqrt call should remain
    // in the generated code as-is.
    const float4 negativeVal = half4(-1, -4, -16, -64);
    coords.xy = sqrt(negativeVal).xy;

    float4       inputVal = half4(testMatrix2x2) + half4(0, 2, 6, 12); // = {1, 4, 9, 16}
    const float4 constVal = half4(1, 4, 9, 16);
    const float4 expected = half4(1, 2, 3, 4);

    return (sqrt(inputVal.x)       == expected.x     &&
            sqrt(inputVal.xy)      == expected.xy    &&
            sqrt(inputVal.xyz)     == expected.xyz   &&
            sqrt(inputVal.xyzw)    == expected.xyzw  &&
            sqrt(constVal.x)       == expected.x     &&
            sqrt(constVal.xy)      == expected.xy    &&
            sqrt(constVal.xyz)     == expected.xyz   &&
            sqrt(constVal.xyzw)    == expected.xyzw) ? colorGreen : colorRed;
}
