    1. store_src_rg                   pos = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. zero_slot_unmasked             $0 = 0
    4. copy_slot_unmasked             kZero = $0
    5. copy_constant                  $0 = 0x0000000A (1.401298e-44)
    6. copy_slot_unmasked             kTen = $0
    7. copy_slot_unmasked             $0 = pos(0)
    8. copy_constant                  $1 = colorGreen(1)
    9. max_float                      $0 = max($0, $1)
   10. copy_constant                  $1 = colorGreen(3)
   11. min_float                      $0 = min($0, $1)
   12. cast_to_int_from_float         $0 = FloatToInt($0)
   13. copy_constant                  $1 = 0x00000005 (7.006492e-45)
   14. mul_int                        $0 *= $1
   15. copy_slot_unmasked             five = $0
   16. store_condition_mask           $20 = CondMask
   17. store_condition_mask           $40 = CondMask
   18. store_condition_mask           $50 = CondMask
   19. store_condition_mask           $30 = CondMask
   20. store_condition_mask           $76 = CondMask
   21. store_condition_mask           $60 = CondMask
   22. store_condition_mask           $14 = CondMask
   23. store_condition_mask           $70 = CondMask
   24. store_condition_mask           $8 = CondMask
   25. branch_if_no_active_lanes      branch_if_no_active_lanes +34 (#59)
   26. store_return_mask              $9 = RetMask
   27. copy_slot_unmasked             $10 = five
   28. copy_slot_unmasked             five = $10
   29. copy_slot_unmasked             $10 = kZero
   30. copy_slot_unmasked             i = $10
   31. store_loop_mask                $10 = LoopMask
   32. jump                           jump +16 (#48)
   33. zero_slot_unmasked             [for-loop continue mask 0] = 0
   34. store_condition_mask           $11 = CondMask
   35. copy_slot_unmasked             $12 = i
   36. copy_slot_unmasked             $13 = five
   37. cmpeq_int                      $12 = equal($12, $13)
   38. merge_condition_mask           CondMask = $11 & $12
   39. copy_slot_unmasked             $13 = i
   40. copy_slot_masked               [return_loop].result = Mask($13)
   41. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   42. load_condition_mask            CondMask = $11
   43. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   44. copy_slot_unmasked             $11 = i
   45. copy_constant                  $12 = 0x00000001 (1.401298e-45)
   46. add_int                        $11 += $12
   47. copy_slot_masked               i = Mask($11)
   48. copy_slot_unmasked             $11 = i
   49. copy_constant                  $12 = 0x0000000A (1.401298e-44)
   50. cmplt_int                      $11 = lessThan($11, $12)
   51. merge_loop_mask                LoopMask &= $11
   52. stack_rewind
   53. branch_if_any_active_lanes     branch_if_any_active_lanes -20 (#33)
   54. load_loop_mask                 LoopMask = $10
   55. zero_slot_unmasked             $10 = 0
   56. copy_slot_masked               [return_loop].result = Mask($10)
   57. load_return_mask               RetMask = $9
   58. copy_slot_unmasked             $9 = [return_loop].result
   59. copy_constant                  $10 = 0x00000005 (7.006492e-45)
   60. cmpeq_int                      $9 = equal($9, $10)
   61. zero_slot_unmasked             $71 = 0
   62. merge_condition_mask           CondMask = $8 & $9
   63. branch_if_no_active_lanes      branch_if_no_active_lanes +39 (#102)
   64. copy_slot_unmasked             $72 = five
   65. copy_slot_unmasked             five = $72
   66. zero_slot_unmasked             $72 = 0
   67. copy_slot_unmasked             sum = $72
   68. zero_slot_unmasked             $72 = 0
   69. copy_slot_unmasked             i = $72
   70. store_loop_mask                $72 = LoopMask
   71. jump                           jump +19 (#90)
   72. zero_slot_unmasked             [for-loop continue mask 1] = 0
   73. store_condition_mask           $73 = CondMask
   74. copy_slot_unmasked             $74 = i
   75. copy_slot_unmasked             $75 = five
   76. cmplt_int                      $74 = lessThan($74, $75)
   77. merge_condition_mask           CondMask = $73 & $74
   78. copy_constant                  $75 = 0xFFFFFFFF
   79. copy_slot_masked               [for-loop continue mask 1] = Mask($75)
   80. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
   81. load_condition_mask            CondMask = $73
   82. copy_2_slots_unmasked          $73..74 = sum(0..1)
   83. add_int                        $73 += $74
   84. copy_slot_masked               sum = Mask($73)
   85. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   86. copy_slot_unmasked             $73 = i
   87. copy_constant                  $74 = 0x00000001 (1.401298e-45)
   88. add_int                        $73 += $74
   89. copy_slot_masked               i = Mask($73)
   90. copy_slot_unmasked             $73 = i
   91. copy_slot_unmasked             $74 = kTen
   92. cmplt_int                      $73 = lessThan($73, $74)
   93. merge_loop_mask                LoopMask &= $73
   94. stack_rewind
   95. branch_if_any_active_lanes     branch_if_any_active_lanes -23 (#72)
   96. load_loop_mask                 LoopMask = $72
   97. copy_slot_unmasked             $72 = sum
   98. copy_slot_masked               [continue_loop].result = Mask($72)
   99. copy_constant                  $73 = 0x00000023 (4.904545e-44)
  100. cmpeq_int                      $72 = equal($72, $73)
  101. copy_slot_masked               $71 = Mask($72)
  102. load_condition_mask            CondMask = $8
  103. zero_slot_unmasked             $15 = 0
  104. merge_condition_mask           CondMask = $70 & $71
  105. branch_if_no_active_lanes      branch_if_no_active_lanes +40 (#145)
  106. copy_constant                  $16 = 0x00000005 (7.006492e-45)
  107. copy_slot_unmasked             five = $16
  108. zero_slot_unmasked             $16 = 0
  109. copy_slot_unmasked             sum = $16
  110. copy_constant                  $16 = 0x00000001 (1.401298e-45)
  111. copy_slot_unmasked             kOne = $16
  112. zero_slot_unmasked             $16 = 0
  113. copy_slot_unmasked             i = $16
  114. store_loop_mask                $16 = LoopMask
  115. jump                           jump +18 (#133)
  116. zero_slot_unmasked             [for-loop continue mask 2] = 0
  117. store_condition_mask           $17 = CondMask
  118. copy_slot_unmasked             $18 = five
  119. copy_slot_unmasked             $19 = i
  120. cmplt_int                      $18 = lessThan($18, $19)
  121. merge_condition_mask           CondMask = $17 & $18
  122. mask_off_loop_mask             LoopMask &= ~(CondMask & LoopMask & RetMask)
  123. load_condition_mask            CondMask = $17
  124. copy_slot_unmasked             $17 = sum
  125. copy_slot_unmasked             $18 = i
  126. add_int                        $17 += $18
  127. copy_slot_masked               sum = Mask($17)
  128. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  129. copy_slot_unmasked             $17 = i
  130. copy_slot_unmasked             $18 = kOne
  131. add_int                        $17 += $18
  132. copy_slot_masked               i = Mask($17)
  133. copy_slot_unmasked             $17 = i
  134. copy_constant                  $18 = 0x0000000A (1.401298e-44)
  135. cmplt_int                      $17 = lessThan($17, $18)
  136. merge_loop_mask                LoopMask &= $17
  137. stack_rewind
  138. branch_if_any_active_lanes     branch_if_any_active_lanes -22 (#116)
  139. load_loop_mask                 LoopMask = $16
  140. copy_slot_unmasked             $16 = sum
  141. copy_slot_masked               [break_loop].result = Mask($16)
  142. copy_constant                  $17 = 0x0000000F (2.101948e-44)
  143. cmpeq_int                      $16 = equal($16, $17)
  144. copy_slot_masked               $15 = Mask($16)
  145. load_condition_mask            CondMask = $70
  146. zero_slot_unmasked             $61 = 0
  147. merge_condition_mask           CondMask = $14 & $15
  148. branch_if_no_active_lanes      branch_if_no_active_lanes +33 (#181)
  149. copy_constant                  $62 = 0x00000009 (1.261169e-44)
  150. swizzle_4                      $62..65 = ($62..65).xxxx
  151. copy_4_slots_unmasked          result = $62..65
  152. copy_constant                  $62 = 0x00000001 (1.401298e-45)
  153. copy_slot_unmasked             i = $62
  154. store_loop_mask                $62 = LoopMask
  155. jump                           jump +9 (#164)
  156. zero_slot_unmasked             [for-loop continue mask 3] = 0
  157. copy_4_slots_unmasked          $63..66 = result
  158. copy_4_slots_masked            result = Mask($63..66)
  159. reenable_loop_mask             LoopMask |= [for-loop continue mask 3]
  160. copy_slot_unmasked             $63 = i
  161. copy_constant                  $64 = 0x00000001 (1.401298e-45)
  162. add_int                        $63 += $64
  163. copy_slot_masked               i = Mask($63)
  164. copy_slot_unmasked             $63 = i
  165. copy_constant                  $64 = 0x00000003 (4.203895e-45)
  166. cmple_int                      $63 = lessThanEqual($63, $64)
  167. merge_loop_mask                LoopMask &= $63
  168. stack_rewind
  169. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#156)
  170. load_loop_mask                 LoopMask = $62
  171. copy_4_slots_unmasked          $62..65 = result
  172. copy_constant                  $66 = 0x00000009 (1.261169e-44)
  173. copy_constant                  $67 = 0x00000001 (1.401298e-45)
  174. copy_constant                  $68 = 0x00000002 (2.802597e-45)
  175. copy_constant                  $69 = 0x00000003 (4.203895e-45)
  176. cmpeq_4_ints                   $62..65 = equal($62..65, $66..69)
  177. bitwise_and_2_ints             $62..63 &= $64..65
  178. bitwise_and_int                $62 &= $63
  179. copy_slot_masked               [loop_operator_le].result = Mask($62)
  180. copy_slot_masked               $61 = Mask($62)
  181. load_condition_mask            CondMask = $14
  182. zero_slot_unmasked             $77 = 0
  183. merge_condition_mask           CondMask = $60 & $61
  184. branch_if_no_active_lanes      branch_if_no_active_lanes +33 (#217)
  185. copy_constant                  $78 = 0x00000009 (1.261169e-44)
  186. swizzle_4                      $78..81 = ($78..81).xxxx
  187. copy_4_slots_unmasked          result = $78..81
  188. copy_constant                  $78 = 0x00000001 (1.401298e-45)
  189. copy_slot_unmasked             i = $78
  190. store_loop_mask                $78 = LoopMask
  191. jump                           jump +9 (#200)
  192. zero_slot_unmasked             [for-loop continue mask 4] = 0
  193. copy_4_slots_unmasked          $79..82 = result
  194. copy_4_slots_masked            result = Mask($79..82)
  195. reenable_loop_mask             LoopMask |= [for-loop continue mask 4]
  196. copy_slot_unmasked             $79 = i
  197. copy_constant                  $80 = 0x00000001 (1.401298e-45)
  198. add_int                        $79 += $80
  199. copy_slot_masked               i = Mask($79)
  200. copy_slot_unmasked             $79 = i
  201. copy_constant                  $80 = 0x00000004 (5.605194e-45)
  202. cmplt_int                      $79 = lessThan($79, $80)
  203. merge_loop_mask                LoopMask &= $79
  204. stack_rewind
  205. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#192)
  206. load_loop_mask                 LoopMask = $78
  207. copy_4_slots_unmasked          $78..81 = result
  208. copy_constant                  $82 = 0x00000009 (1.261169e-44)
  209. copy_constant                  $83 = 0x00000001 (1.401298e-45)
  210. copy_constant                  $84 = 0x00000002 (2.802597e-45)
  211. copy_constant                  $85 = 0x00000003 (4.203895e-45)
  212. cmpeq_4_ints                   $78..81 = equal($78..81, $82..85)
  213. bitwise_and_2_ints             $78..79 &= $80..81
  214. bitwise_and_int                $78 &= $79
  215. copy_slot_masked               [loop_operator_lt].result = Mask($78)
  216. copy_slot_masked               $77 = Mask($78)
  217. load_condition_mask            CondMask = $60
  218. zero_slot_unmasked             $31 = 0
  219. merge_condition_mask           CondMask = $76 & $77
  220. branch_if_no_active_lanes      branch_if_no_active_lanes +33 (#253)
  221. copy_constant                  $32 = 0x00000009 (1.261169e-44)
  222. swizzle_4                      $32..35 = ($32..35).xxxx
  223. copy_4_slots_unmasked          result = $32..35
  224. copy_constant                  $32 = 0x00000003 (4.203895e-45)
  225. copy_slot_unmasked             i = $32
  226. store_loop_mask                $32 = LoopMask
  227. jump                           jump +9 (#236)
  228. zero_slot_unmasked             [for-loop continue mask 5] = 0
  229. copy_4_slots_unmasked          $33..36 = result
  230. copy_4_slots_masked            result = Mask($33..36)
  231. reenable_loop_mask             LoopMask |= [for-loop continue mask 5]
  232. copy_slot_unmasked             $33 = i
  233. copy_constant                  $34 = 0x00000001 (1.401298e-45)
  234. sub_int                        $33 -= $34
  235. copy_slot_masked               i = Mask($33)
  236. copy_constant                  $33 = 0x00000001 (1.401298e-45)
  237. copy_slot_unmasked             $34 = i
  238. cmple_int                      $33 = lessThanEqual($33, $34)
  239. merge_loop_mask                LoopMask &= $33
  240. stack_rewind
  241. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#228)
  242. load_loop_mask                 LoopMask = $32
  243. copy_4_slots_unmasked          $32..35 = result
  244. copy_constant                  $36 = 0x00000009 (1.261169e-44)
  245. copy_constant                  $37 = 0x00000003 (4.203895e-45)
  246. copy_constant                  $38 = 0x00000002 (2.802597e-45)
  247. copy_constant                  $39 = 0x00000001 (1.401298e-45)
  248. cmpeq_4_ints                   $32..35 = equal($32..35, $36..39)
  249. bitwise_and_2_ints             $32..33 &= $34..35
  250. bitwise_and_int                $32 &= $33
  251. copy_slot_masked               [loop_operator_ge].result = Mask($32)
  252. copy_slot_masked               $31 = Mask($32)
  253. load_condition_mask            CondMask = $76
  254. zero_slot_unmasked             $51 = 0
  255. merge_condition_mask           CondMask = $30 & $31
  256. branch_if_no_active_lanes      branch_if_no_active_lanes +33 (#289)
  257. copy_constant                  $52 = 0x00000009 (1.261169e-44)
  258. swizzle_4                      $52..55 = ($52..55).xxxx
  259. copy_4_slots_unmasked          result = $52..55
  260. copy_constant                  $52 = 0x00000003 (4.203895e-45)
  261. copy_slot_unmasked             i = $52
  262. store_loop_mask                $52 = LoopMask
  263. jump                           jump +9 (#272)
  264. zero_slot_unmasked             [for-loop continue mask 6] = 0
  265. copy_4_slots_unmasked          $53..56 = result
  266. copy_4_slots_masked            result = Mask($53..56)
  267. reenable_loop_mask             LoopMask |= [for-loop continue mask 6]
  268. copy_slot_unmasked             $53 = i
  269. copy_constant                  $54 = 0x00000001 (1.401298e-45)
  270. sub_int                        $53 -= $54
  271. copy_slot_masked               i = Mask($53)
  272. zero_slot_unmasked             $53 = 0
  273. copy_slot_unmasked             $54 = i
  274. cmplt_int                      $53 = lessThan($53, $54)
  275. merge_loop_mask                LoopMask &= $53
  276. stack_rewind
  277. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#264)
  278. load_loop_mask                 LoopMask = $52
  279. copy_4_slots_unmasked          $52..55 = result
  280. copy_constant                  $56 = 0x00000009 (1.261169e-44)
  281. copy_constant                  $57 = 0x00000003 (4.203895e-45)
  282. copy_constant                  $58 = 0x00000002 (2.802597e-45)
  283. copy_constant                  $59 = 0x00000001 (1.401298e-45)
  284. cmpeq_4_ints                   $52..55 = equal($52..55, $56..59)
  285. bitwise_and_2_ints             $52..53 &= $54..55
  286. bitwise_and_int                $52 &= $53
  287. copy_slot_masked               [loop_operator_gt].result = Mask($52)
  288. copy_slot_masked               $51 = Mask($52)
  289. load_condition_mask            CondMask = $30
  290. zero_slot_unmasked             $41 = 0
  291. merge_condition_mask           CondMask = $50 & $51
  292. branch_if_no_active_lanes      branch_if_no_active_lanes +33 (#325)
  293. copy_constant                  $42 = 0x00000009 (1.261169e-44)
  294. swizzle_4                      $42..45 = ($42..45).xxxx
  295. copy_4_slots_unmasked          result = $42..45
  296. copy_constant                  $42 = 0x00000001 (1.401298e-45)
  297. copy_slot_unmasked             i = $42
  298. store_loop_mask                $42 = LoopMask
  299. jump                           jump +9 (#308)
  300. zero_slot_unmasked             [for-loop continue mask 7] = 0
  301. copy_4_slots_unmasked          $43..46 = result
  302. copy_4_slots_masked            result = Mask($43..46)
  303. reenable_loop_mask             LoopMask |= [for-loop continue mask 7]
  304. copy_slot_unmasked             $43 = i
  305. copy_constant                  $44 = 0x00000001 (1.401298e-45)
  306. add_int                        $43 += $44
  307. copy_slot_masked               i = Mask($43)
  308. copy_slot_unmasked             $43 = i
  309. copy_constant                  $44 = 0x00000001 (1.401298e-45)
  310. cmpeq_int                      $43 = equal($43, $44)
  311. merge_loop_mask                LoopMask &= $43
  312. stack_rewind
  313. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#300)
  314. load_loop_mask                 LoopMask = $42
  315. copy_4_slots_unmasked          $42..45 = result
  316. copy_constant                  $46 = 0x00000009 (1.261169e-44)
  317. copy_constant                  $47 = 0x00000009 (1.261169e-44)
  318. copy_constant                  $48 = 0x00000009 (1.261169e-44)
  319. copy_constant                  $49 = 0x00000001 (1.401298e-45)
  320. cmpeq_4_ints                   $42..45 = equal($42..45, $46..49)
  321. bitwise_and_2_ints             $42..43 &= $44..45
  322. bitwise_and_int                $42 &= $43
  323. copy_slot_masked               [loop_operator_eq].result = Mask($42)
  324. copy_slot_masked               $41 = Mask($42)
  325. load_condition_mask            CondMask = $50
  326. zero_slot_unmasked             $21 = 0
  327. merge_condition_mask           CondMask = $40 & $41
  328. branch_if_no_active_lanes      branch_if_no_active_lanes +33 (#361)
  329. copy_constant                  $22 = 0x00000009 (1.261169e-44)
  330. swizzle_4                      $22..25 = ($22..25).xxxx
  331. copy_4_slots_unmasked          result = $22..25
  332. copy_constant                  $22 = 0x00000001 (1.401298e-45)
  333. copy_slot_unmasked             i = $22
  334. store_loop_mask                $22 = LoopMask
  335. jump                           jump +9 (#344)
  336. zero_slot_unmasked             [for-loop continue mask 8] = 0
  337. copy_4_slots_unmasked          $23..26 = result
  338. copy_4_slots_masked            result = Mask($23..26)
  339. reenable_loop_mask             LoopMask |= [for-loop continue mask 8]
  340. copy_slot_unmasked             $23 = i
  341. copy_constant                  $24 = 0x00000001 (1.401298e-45)
  342. add_int                        $23 += $24
  343. copy_slot_masked               i = Mask($23)
  344. copy_slot_unmasked             $23 = i
  345. copy_constant                  $24 = 0x00000004 (5.605194e-45)
  346. cmpne_int                      $23 = notEqual($23, $24)
  347. merge_loop_mask                LoopMask &= $23
  348. stack_rewind
  349. branch_if_any_active_lanes     branch_if_any_active_lanes -13 (#336)
  350. load_loop_mask                 LoopMask = $22
  351. copy_4_slots_unmasked          $22..25 = result
  352. copy_constant                  $26 = 0x00000009 (1.261169e-44)
  353. copy_constant                  $27 = 0x00000001 (1.401298e-45)
  354. copy_constant                  $28 = 0x00000002 (2.802597e-45)
  355. copy_constant                  $29 = 0x00000003 (4.203895e-45)
  356. cmpeq_4_ints                   $22..25 = equal($22..25, $26..29)
  357. bitwise_and_2_ints             $22..23 &= $24..25
  358. bitwise_and_int                $22 &= $23
  359. copy_slot_masked               [loop_operator_ne].result = Mask($22)
  360. copy_slot_masked               $21 = Mask($22)
  361. load_condition_mask            CondMask = $40
  362. copy_4_constants               $0..3 = colorRed
  363. merge_condition_mask           CondMask = $20 & $21
  364. copy_4_constants               $4..7 = colorGreen
  365. copy_4_slots_masked            $0..3 = Mask($4..7)
  366. load_condition_mask            CondMask = $20
  367. copy_4_slots_masked            [main].result = Mask($0..3)
  368. load_src                       src.rgba = [main].result
