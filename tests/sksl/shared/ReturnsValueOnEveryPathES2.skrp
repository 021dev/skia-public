    1. store_src_rg                   coords = src.rg
    2. init_lane_masks                CondMask = LoopMask = RetMask = true
    3. store_condition_mask           $8 = CondMask
    4. store_condition_mask           $25 = CondMask
    5. store_condition_mask           $32 = CondMask
    6. store_condition_mask           $19 = CondMask
    7. store_condition_mask           $39 = CondMask
    8. store_condition_mask           $37 = CondMask
    9. copy_constant                  $38 = 0xFFFFFFFF
   10. zero_slot_unmasked             $40 = 0
   11. merge_condition_mask           CondMask = $37 & $38
   12. branch_if_no_active_lanes      branch_if_no_active_lanes +15 (#27)
   13. store_condition_mask           $41 = CondMask
   14. copy_constant                  $42 = unknownInput
   15. copy_constant                  $43 = 0x3F800000 (1.0)
   16. cmpeq_float                    $42 = equal($42, $43)
   17. merge_condition_mask           CondMask = $41 & $42
   18. copy_constant                  $43 = 0xFFFFFFFF
   19. copy_slot_masked               [return_on_both_sides].result = Mask($43)
   20. bitwise_not_int                $42 = ~$42
   21. merge_condition_mask           CondMask = $41 & $42
   22. copy_constant                  $43 = 0xFFFFFFFF
   23. copy_slot_masked               [return_on_both_sides].result = Mask($43)
   24. load_condition_mask            CondMask = $41
   25. copy_slot_unmasked             $41 = [return_on_both_sides].result
   26. copy_slot_masked               $40 = Mask($41)
   27. load_condition_mask            CondMask = $37
   28. zero_slot_unmasked             $20 = 0
   29. merge_condition_mask           CondMask = $39 & $40
   30. branch_if_no_active_lanes      branch_if_no_active_lanes +25 (#55)
   31. store_return_mask              $21 = RetMask
   32. zero_slot_unmasked             $22 = 0
   33. copy_slot_unmasked             x = $22
   34. store_loop_mask                $22 = LoopMask
   35. jump                           jump +10 (#45)
   36. zero_slot_unmasked             [for-loop continue mask 0] = 0
   37. copy_constant                  $23 = 0xFFFFFFFF
   38. copy_slot_masked               [for_inside_body].result = Mask($23)
   39. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   40. reenable_loop_mask             LoopMask |= [for-loop continue mask 0]
   41. copy_slot_unmasked             $23 = x
   42. copy_constant                  $24 = 0x00000001 (1.401298e-45)
   43. add_int                        $23 += $24
   44. copy_slot_masked               x = Mask($23)
   45. copy_slot_unmasked             $23 = x
   46. copy_constant                  $24 = 0x0000000A (1.401298e-44)
   47. cmple_int                      $23 = lessThanEqual($23, $24)
   48. merge_loop_mask                LoopMask &= $23
   49. stack_rewind
   50. branch_if_any_active_lanes     branch_if_any_active_lanes -14 (#36)
   51. load_loop_mask                 LoopMask = $22
   52. load_return_mask               RetMask = $21
   53. copy_slot_unmasked             $21 = [for_inside_body].result
   54. copy_slot_masked               $20 = Mask($21)
   55. load_condition_mask            CondMask = $39
   56. zero_slot_unmasked             $33 = 0
   57. merge_condition_mask           CondMask = $19 & $20
   58. branch_if_no_active_lanes      branch_if_no_active_lanes +21 (#79)
   59. zero_slot_unmasked             $34 = 0
   60. copy_slot_unmasked             x = $34
   61. store_loop_mask                $34 = LoopMask
   62. jump                           jump +7 (#69)
   63. zero_slot_unmasked             [for-loop continue mask 1] = 0
   64. reenable_loop_mask             LoopMask |= [for-loop continue mask 1]
   65. copy_slot_unmasked             $35 = x
   66. copy_constant                  $36 = 0x00000001 (1.401298e-45)
   67. add_int                        $35 += $36
   68. copy_slot_masked               x = Mask($35)
   69. copy_slot_unmasked             $35 = x
   70. copy_constant                  $36 = 0x0000000A (1.401298e-44)
   71. cmple_int                      $35 = lessThanEqual($35, $36)
   72. merge_loop_mask                LoopMask &= $35
   73. stack_rewind
   74. branch_if_any_active_lanes     branch_if_any_active_lanes -11 (#63)
   75. load_loop_mask                 LoopMask = $34
   76. copy_constant                  $34 = 0xFFFFFFFF
   77. copy_slot_masked               [after_for_body].result = Mask($34)
   78. copy_slot_masked               $33 = Mask($34)
   79. load_condition_mask            CondMask = $19
   80. zero_slot_unmasked             $26 = 0
   81. merge_condition_mask           CondMask = $32 & $33
   82. branch_if_no_active_lanes      branch_if_no_active_lanes +36 (#118)
   83. store_return_mask              $27 = RetMask
   84. zero_slot_unmasked             $28 = 0
   85. copy_slot_unmasked             x = $28
   86. store_loop_mask                $28 = LoopMask
   87. jump                           jump +21 (#108)
   88. zero_slot_unmasked             [for-loop continue mask 2] = 0
   89. store_condition_mask           $29 = CondMask
   90. copy_constant                  $30 = unknownInput
   91. copy_constant                  $31 = 0x3F800000 (1.0)
   92. cmpeq_float                    $30 = equal($30, $31)
   93. merge_condition_mask           CondMask = $29 & $30
   94. copy_constant                  $31 = 0xFFFFFFFF
   95. copy_slot_masked               [for_with_double_sided_conditional_return].result = Mask($31)
   96. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
   97. bitwise_not_int                $30 = ~$30
   98. merge_condition_mask           CondMask = $29 & $30
   99. copy_constant                  $31 = 0xFFFFFFFF
  100. copy_slot_masked               [for_with_double_sided_conditional_return].result = Mask($31)
  101. mask_off_return_mask           RetMask &= ~(CondMask & LoopMask & RetMask)
  102. load_condition_mask            CondMask = $29
  103. reenable_loop_mask             LoopMask |= [for-loop continue mask 2]
  104. copy_slot_unmasked             $29 = x
  105. copy_constant                  $30 = 0x00000001 (1.401298e-45)
  106. add_int                        $29 += $30
  107. copy_slot_masked               x = Mask($29)
  108. copy_slot_unmasked             $29 = x
  109. copy_constant                  $30 = 0x0000000A (1.401298e-44)
  110. cmple_int                      $29 = lessThanEqual($29, $30)
  111. merge_loop_mask                LoopMask &= $29
  112. stack_rewind
  113. branch_if_any_active_lanes     branch_if_any_active_lanes -25 (#88)
  114. load_loop_mask                 LoopMask = $28
  115. load_return_mask               RetMask = $27
  116. copy_slot_unmasked             $27 = [for_with_double_sided_conditional_return].result
  117. copy_slot_masked               $26 = Mask($27)
  118. load_condition_mask            CondMask = $32
  119. zero_slot_unmasked             $9 = 0
  120. merge_condition_mask           CondMask = $25 & $26
  121. branch_if_no_active_lanes      branch_if_no_active_lanes +45 (#166)
  122. store_condition_mask           $10 = CondMask
  123. copy_constant                  $11 = unknownInput
  124. copy_constant                  $12 = 0x3F800000 (1.0)
  125. cmpeq_float                    $11 = equal($11, $12)
  126. merge_condition_mask           CondMask = $10 & $11
  127. copy_constant                  $12 = 0xFFFFFFFF
  128. copy_slot_masked               [if_else_chain].result = Mask($12)
  129. bitwise_not_int                $11 = ~$11
  130. merge_condition_mask           CondMask = $10 & $11
  131. store_condition_mask           $12 = CondMask
  132. copy_constant                  $13 = unknownInput
  133. copy_constant                  $14 = 0x40000000 (2.0)
  134. cmpeq_float                    $13 = equal($13, $14)
  135. merge_condition_mask           CondMask = $12 & $13
  136. zero_slot_unmasked             $14 = 0
  137. copy_slot_masked               [if_else_chain].result = Mask($14)
  138. bitwise_not_int                $13 = ~$13
  139. merge_condition_mask           CondMask = $12 & $13
  140. store_condition_mask           $14 = CondMask
  141. copy_constant                  $15 = unknownInput
  142. copy_constant                  $16 = 0x40400000 (3.0)
  143. cmpeq_float                    $15 = equal($15, $16)
  144. merge_condition_mask           CondMask = $14 & $15
  145. copy_constant                  $16 = 0xFFFFFFFF
  146. copy_slot_masked               [if_else_chain].result = Mask($16)
  147. bitwise_not_int                $15 = ~$15
  148. merge_condition_mask           CondMask = $14 & $15
  149. store_condition_mask           $16 = CondMask
  150. copy_constant                  $17 = unknownInput
  151. copy_constant                  $18 = 0x40800000 (4.0)
  152. cmpeq_float                    $17 = equal($17, $18)
  153. merge_condition_mask           CondMask = $16 & $17
  154. zero_slot_unmasked             $18 = 0
  155. copy_slot_masked               [if_else_chain].result = Mask($18)
  156. bitwise_not_int                $17 = ~$17
  157. merge_condition_mask           CondMask = $16 & $17
  158. copy_constant                  $18 = 0xFFFFFFFF
  159. copy_slot_masked               [if_else_chain].result = Mask($18)
  160. load_condition_mask            CondMask = $16
  161. load_condition_mask            CondMask = $14
  162. load_condition_mask            CondMask = $12
  163. load_condition_mask            CondMask = $10
  164. copy_slot_unmasked             $10 = [if_else_chain].result
  165. copy_slot_masked               $9 = Mask($10)
  166. load_condition_mask            CondMask = $25
  167. copy_4_constants               $0..3 = colorRed
  168. merge_condition_mask           CondMask = $8 & $9
  169. copy_4_constants               $4..7 = colorGreen
  170. copy_4_slots_masked            $0..3 = Mask($4..7)
  171. load_condition_mask            CondMask = $8
  172. copy_4_slots_masked            [main].result = Mask($0..3)
  173. load_src                       src.rgba = [main].result
